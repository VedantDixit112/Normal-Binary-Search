class Solution {
    public long countFairPairs(int[] arr, int l, int u) {
        Arrays.sort(arr);
        long count=0;
        for(int i=0;i<arr.length;i++){
            int a=path(arr,l-arr[i],i+1);
            int b=path1(arr,u-arr[i],i+1);
            if(a<arr.length && b<arr.length){
                count+=(b-a)+1;
            }
        }
        return count;
    }
    public int path(int []arr,int target,int a1){
        int low=a1;
        int high=arr.length-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+(high-low)/2);
            if(arr[mid]==target){
                ans=mid;
                high=mid-1;
            }
            else if(target>arr[mid]){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return ans==-1?low:ans;
    }
    public int path1(int []arr,int target,int a1){
        int low=a1;
        int high=arr.length-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+(high-low)/2);
            if(arr[mid]==target){
                ans=mid;
                low=mid+1;
            }
            else if(target>arr[mid]){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return ans==-1?high:ans;
    }
}
